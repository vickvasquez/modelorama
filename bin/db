#!/bin/sh

':' // ; exec "$(command -v nodejs || command -v node)" "$0" "$@"
; // eslint-disable-line semi-style

'use strict';

const argv = require('wargs')(process.argv.slice(2));
const cmd = argv._.shift();

const USAGE_INFO = `
Perform database changes

  --only       Optional. Filter out specific models

  migrate

    --make     Optional. Take an snapshot from your models
    --apply    Optional. Save changes from executed migrations

    --create   Optional. Create database from your schema
    --destroy  Optional. Drop the database entirely

    --up       Optional. Apply all pending migrations
    --down     Optional. Revert all applied migrations
    --next     Optional. Apply the latest pending migration
    --prev     Optional. Revert the latest applied migration

    --from     Optional. Apply migrations from this offset
    --to       Optional. Apply migrations up to this offset

  backup

    --import   Optional. Load into the database, directory or file
    --export   Optional. Save backup to destination, directory

Examples:
  bin/db migrate --make
  bin/db migrate --apply "migration description"
  bin/db backup --load ../from/backup/or/path/to/seeds
  bin/db backup --save path/to/seeds --only Product,Cart
`;

const options = {
  migrations: argv._.slice(),
  options: argv.flags,
};

const cli = require('json-schema-sequelizer/cli');

let _error;
let _conn;

function db(cb) {
  if (cmd === 'migrate' || cmd === 'backup') {
    return cb(require('../src/models'));
  }
}

Promise.resolve()
  .then(() => db(x => x.connect()))
  .then(() => {
    if (cmd === 'migrate') {
      return db(x => cli.migrate(x, options));
    }

    if (cmd === 'backup') {
      return db(x => cli.backup(x, options));
    }

    process.stderr.write(`${USAGE_INFO}\n`);
    process.exit(1);
  })
  .catch(e => {
    process.stderr.write(`${e.stack}\n`);
    _error = true;
  })
  .then(() => db(x => x.close()))
  .catch(e => {
    process.stderr.write(`${e.stack}\n`);
    _error = true;
  })
  .then(() => {
    if (_error) {
      process.exit(1);
    }
  });
